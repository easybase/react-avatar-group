{"version":3,"sources":["../../src/utils.tsx","../../src/SingleAvatar.tsx","../../src/OverflowAvatar.tsx","../../src/TooltipStyles.tsx","../../src/AvatarGroup.tsx","utils.js","App.js","reportWebVitals.js","index.js"],"names":["randomAvatarColor","colorFromName","name","avatarColors","hash","len","length","i","charCodeAt","Math","abs","cleanSearchParams","params","Array","from","entries","forEach","value","key","delete","BASE_AVATAR_STYLE","boxShadows","Img","styled","img","props","size","square","shadow","SingleAvatar","hidden","avatar","options","URLSearchParams","fontSize","color","fontColor","background","backgroundColor","randomBackgroundColors","bold","uppercase","initialCharacters","rounded","_jsx","Tippy","content","arrow","tooltipArrow","disabled","hideTooltip","draggable","alt","src","toString","style","avatarStyle","className","tooltip","OverflowAvatar","tooltipStyle","Global","styles","css","GroupDiv","div","AvatarGroup","useState","overrideMax","setOverrideMax","avatars","_jsxs","max","displayAllOnHover","onMouseEnter","_","onMouseLeave","map","ele","TooltipStyles","slice","names","extraColorArray","ExampleGroup","App","marginLeft","display","flexDirection","justifyContent","height","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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CJ,cAAgBlB,MAG7BqC,cAACe,GAAe5B,YAAYN,EAAM6C,QAAQhE,OAASmB,EAAM+C,KAAOxC,QAASP,GAAW,oBAClFA,EAAMyB,aAAeN,cAACmC,GAAcnB,aAAcnC,EAAMmC,wCAMxDL,MAAO9B,EAAM8B,kBAClB9B,EAAM6C,QAAQO,KAAI,SAACC,EAAKvE,GAAN,OACfqC,cAACf,GACGE,OAAQ+C,EACR9C,QAASP,GACJ,gBAAkBlB,OAG7BkB,EAAMyB,aAAeN,cAACmC,GAAcnB,aAAcnC,EAAMmC,iCC/EvE,IAAMqB,EAAQ,CACjB,UACA,YACA,SACA,QACA,QACA,YACA,SACA,QACA,SACA,WACA,WACA,SACA,SACA,OACA,YACA,SACA,QACA,UACA,QACA,SACA,WACA,QACA,UACA,YACA,SACA,YACA,WACA,WACA,UACA,QACA,UACA,SACA,SACA,WACA,QACA,SACA,YACA,QACA,YACA,QACA,OACA,WACA,SACA,YACA,SACA,WACA,WACA,OACA,QACA,SACA,SACA,SACA,QACA,UACA,YACA,OACA,UACA,UACA,SACA,QACA,QACA,YACA,SACA,QACA,SACA,WACA,WACA,SACA,SACA,OACA,YACA,SACA,QACA,UACA,QACA,SACA,WACA,QACA,UACA,YACA,SACA,YACA,WACA,WACA,UACA,QACA,UACA,SACA,SACA,WACA,QACA,SACA,YACA,QACA,YACA,QACA,OACA,WACA,SACA,YACA,SACA,WACA,WACA,OACA,QACA,SACA,SACA,SACA,QACA,UACA,YACA,OACA,UACA,UACA,QACA,UACA,WACA,WACA,QACA,QACA,MACA,OACA,SACA,QACA,SACA,MACA,QACA,QACA,UACA,QACA,QACA,SACA,UACA,UACA,QACA,WACA,UACA,SACA,OACA,OACA,OACA,aACA,MACA,SACA,SACA,OACA,SACA,SACA,OACA,UACA,OACA,UACA,SACA,MACA,QACA,UACA,WACA,WACA,QACA,QACA,MACA,OACA,SACA,QACA,SACA,MACA,QACA,QACA,UACA,QACA,QACA,SACA,UACA,UACA,QACA,WACA,UACA,SACA,OACA,OACA,OACA,aACA,MACA,SACA,SACA,OACA,SACA,SACA,OACA,UACA,OACA,UACA,SACA,MACA,SAGSC,EAAkB,CAAC,SAAU,SAAU,SAAU,SAAU,SACpE,SAAU,SAAU,SAAU,SAAU,SACxC,SAAU,SAAU,SAAU,SAAU,SACxC,SAAU,SAAU,SAAU,SAAU,SACxC,SAAU,SAAU,SAAU,SAAU,SACxC,SAAU,SAAU,SAAU,SAAU,SACxC,SAAU,SAAU,SAAU,SAAU,SACxC,SAAU,SAAU,SAAU,SAAU,SACxC,SAAU,SAAU,SAAU,SAAU,SACxC,SAAU,SAAU,SAAU,SAAU,U,mBC3M5C,SAASC,EAAT,GAA2C,IAAnBjF,EAAkB,EAAlBA,KAASuB,EAAS,iBACxC,OACE,gCACE,6BAAKvB,IACL,cAAC,EAAD,eAAiBuB,OA6DR2D,MAxDf,WACE,OACE,sBAAK7B,MAAO,CAAE8B,WAAY,GAAIC,QAAS,OAAQC,cAAe,SAAUC,eAAgB,eAAgBC,OAAQ,SAAhH,UACE,cAACN,EAAD,CACEjF,KAAK,gBACLoE,QAASW,EAAMD,MAAM,EAAG,KAE1B,cAACG,EAAD,CACEjF,KAAK,kEACLoE,QAAO,sBAAMW,EAAMD,MAAM,EAAG,IAArB,CAAyB,CAAEjD,OAAQ,QAASO,gBAAiB,SAAUF,UAAW,SAAUsB,QAAS,8TAC5GhB,kBAAmB,EACnBD,WAAS,EACTf,KAAM,GACNC,QAAM,IAER,cAACwD,EAAD,CACEjF,KAAK,wCACLoE,QAASW,EAAMD,MAAM,EAAG,IACxBR,IAAK,EACL/B,WAAS,EACTf,KAAM,GACNE,OAAQ,EACRQ,UAAU,SACVqC,mBAAiB,IAEnB,cAACU,EAAD,CACEjF,KAAK,wCACLoE,QAASW,EAAMD,MAAM,EAAG,KACxBR,IAAK,EACL/B,WAAS,EACTf,KAAM,GACNE,OAAQ,EACR6C,mBAAiB,IAEnB,cAACU,EAAD,CACEjF,KAAK,qFACLoE,QAASW,EAAMD,MAAM,EAAG,MACxBR,IAAK,GACL/B,WAAS,EACTf,KAAM,GACNa,uBAAwB2C,EACxBtD,OAAQ,IAEV,cAACuD,EAAD,CACEjF,KAAK,kCACLoE,QAASW,EAAMD,MAAM,EAAG,KACxBtC,kBAAmB,EACnB8B,IAAK,EACL9C,KAAM,GACNC,QAAM,EACNqB,cAAY,QCnDL0C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.438b5a53.chunk.js","sourcesContent":["const randomAvatarColor = [\"f44336\", \"e91e63\", \"9c27b0\", \"673ab7\", \"3f51b5\", \"2196f3\", \"009688\", \"ffc107\", \"ff9800\", \"ff5722\", \"795548\"];\n\nexport function colorFromName(name: string, avatarColors = randomAvatarColor) {\n    let hash = 0\n    let len = name.length;\n    for (let i = 0; i < len; i++) {\n        hash = ((hash << 5) - hash) + name.charCodeAt(i);\n        hash |= 0;\n    }\n    return avatarColors[Math.abs(hash) % avatarColors.length];\n}\n\nexport function cleanSearchParams(params: URLSearchParams) {\n    Array.from(params.entries()).forEach(([key, value]) => {\n        if (value === '') params.delete(key);\n    });\n}\n\n// Based on @mui/material/Paper\nexport const boxShadows: Record<number, string> = {\n    1: '0px 2px 1px -1px rgba(0,0,0,0.2),0px 1px 1px 0px rgba(0,0,0,0.14),0px 1px 3px 0px rgba(0,0,0,0.12)',\n    2: '0px 3px 1px -2px rgba(0,0,0,0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)',\n    3: '0px 3px 3px -2px rgba(0,0,0,0.2),0px 3px 4px 0px rgba(0,0,0,0.14),0px 1px 8px 0px rgba(0,0,0,0.12)',\n    4: '0px 2px 4px -1px rgba(0,0,0,0.2),0px 4px 5px 0px rgba(0,0,0,0.14),0px 1px 10px 0px rgba(0,0,0,0.12)',\n    5: '0px 3px 5px -1px rgba(0,0,0,0.2),0px 5px 8px 0px rgba(0,0,0,0.14),0px 1px 14px 0px rgba(0,0,0,0.12)'\n}\n\nexport const ANIMATION_EASING = \".2s ease-in-out\";\n\nexport const BASE_AVATAR_STYLE = `\nobject-fit: cover;\nopacity: 1;\nuser-select: none;\nuser-drag: none;\ndisplay: inline-block;\nmargin-left: -10px;\nposition: relative;\n`\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { IAvatar, AvatarGroupOptions } from './types';\nimport { colorFromName, cleanSearchParams, boxShadows, ANIMATION_EASING, BASE_AVATAR_STYLE } from './utils';\nimport Tippy from '@tippyjs/react';\n\nconst Img = styled.img<AvatarGroupOptions & { isOverflowAvatar?: boolean }>`\n    height: ${props => props.size}px;\n    width: ${props => props.size}px;\n    transition: margin-left ${ANIMATION_EASING}, opacity ${ANIMATION_EASING}, width ${ANIMATION_EASING};\n    border-radius: ${props => props.square ? '0px' : '50%'};\n    box-shadow: ${props => props.shadow ? boxShadows[props.shadow] : 'none'};\n    ${BASE_AVATAR_STYLE}\n`;\n\ninterface ISingleAvatar {\n    avatar: string | IAvatar;\n    options: AvatarGroupOptions;\n    hidden?: boolean;\n}\n\nexport default function SingleAvatar({ avatar, options, hidden }: ISingleAvatar) {\n    const size = options.size || 25;\n\n    if (typeof avatar === \"string\") {\n        const params = new URLSearchParams({\n            size: `${size * 2}`,\n            name: avatar,\n            \"font-size\": `${options.fontSize || 0.66}`,\n            color: options.fontColor || \"FFFFFF\",\n            background: options.backgroundColor || colorFromName(avatar, options.randomBackgroundColors),\n            bold: options.bold ? 'true' : '',\n            uppercase: options.uppercase ? '' : 'false',\n            length: options.initialCharacters ? `${options.initialCharacters}` : '',\n            rounded: options.square ? 'false ' : ''\n        });\n\n        cleanSearchParams(params);\n\n        return (\n            <Tippy content={avatar} arrow={options.tooltipArrow} disabled={options.hideTooltip}>\n                <Img\n                    draggable=\"false\"\n                    alt={`ui-avatar-${avatar}`}\n                    src={`https://ui-avatars.com/api/?${params.toString()}`}\n                    size={size}\n                    square={!!options.square}\n                    shadow={options.shadow}\n                    style={options.avatarStyle}\n                    className={hidden ? \"hidden\" : \"\"}\n                />\n            </Tippy>\n        )\n    } else {\n        const params = new URLSearchParams({\n            size: `${size * 2}`,\n            name: avatar.avatar,\n            \"font-size\": `${avatar.fontSize || options.fontSize || 0.66}`,\n            color: avatar.fontColor || options.fontColor || \"FFFFFF\",\n            background: avatar.backgroundColor || options.backgroundColor || colorFromName(avatar.avatar, options.randomBackgroundColors),\n            bold: options.bold ? 'true' : '',\n            uppercase: options.uppercase ? '' : 'false',\n            length: options.initialCharacters ? `${options.initialCharacters}` : '',\n            rounded: options.square ? 'false ' : ''\n        });\n\n        cleanSearchParams(params);\n\n        return (\n            <Tippy content={avatar.tooltip || avatar.avatar} arrow={options.tooltipArrow} disabled={options.hideTooltip}>\n                <Img\n                    draggable=\"false\"\n                    alt={`ui-avatar-${avatar.avatar}`}\n                    src={`https://ui-avatars.com/api/?${params.toString()}`}\n                    size={size}\n                    square={!!options.square}\n                    shadow={options.shadow}\n                    style={avatar.style || options.avatarStyle}\n                    className={hidden ? \"hidden\" : \"\"}\n                />\n            </Tippy>\n        )\n    }\n}\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport { AvatarGroupOptions } from './types';\nimport { colorFromName, cleanSearchParams, boxShadows, ANIMATION_EASING, BASE_AVATAR_STYLE } from './utils';\n\nconst Img = styled.img<AvatarGroupOptions>`\n    height: ${props => props.size! - 4}px;\n    width: ${props => props.size! - 4}px;\n    transition: margin-left ${ANIMATION_EASING}, opacity ${ANIMATION_EASING}, width ${ANIMATION_EASING};\n    border-radius: ${props => props.square ? '0px' : '50%'};\n    box-shadow: ${props => props.shadow ? boxShadows[props.shadow] : 'none'};\n    border: 2px solid #${props => props.backgroundColor};\n    ${BASE_AVATAR_STYLE}\n`;\n\ninterface IOverflowAvatar {\n    avatar: string;\n    options: AvatarGroupOptions;\n    hidden?: boolean;\n}\n\nexport default function OverflowAvatar({ avatar, options, hidden }: IOverflowAvatar) {\n    const size = options.size || 25;\n    const backgroundColor = options.fontColor || options.backgroundColor || colorFromName(avatar, options.randomBackgroundColors);\n\n    let fontSize = options.fontSize || 0.66;\n    if (avatar.length === 3) {\n        if (!options.fontSize || options.fontSize > 0.42) {\n            // If the custom font size is less than the minimum of 0.42, don't override it.\n            fontSize = 0.42;\n        }\n    } else if (avatar.length > 3) {\n        if (!options.fontSize || options.fontSize > 0.32) {\n            // If the custom font size is less than the minimum of 0.32, don't override it.\n            fontSize = 0.32;\n        }\n    }\n\n    const params = new URLSearchParams({\n        size: `${size * 2}`,\n        name: avatar,\n        \"font-size\": `${fontSize}`,\n        color: backgroundColor,\n        background: \"FFFFFF\",\n        bold: options.bold ? 'true' : '',\n        uppercase: options.uppercase ? '' : 'false',\n        length: '5',\n        rounded: options.square ? 'false ' : ''\n    });\n\n    cleanSearchParams(params);\n\n    return (\n        <Img\n            draggable=\"false\"\n            alt={`ui-avatar-${avatar}`}\n            src={`https://ui-avatars.com/api/?${params.toString()}`}\n            size={size}\n            square={!!options.square}\n            shadow={options.shadow}\n            style={options.avatarStyle}\n            className={hidden ? \"overflow-hidden\" : \"\"}\n            backgroundColor={backgroundColor}\n        />\n    )\n}\n","import { Global, css } from '@emotion/react'\n\n// TODO: instead of Global styles, use JSX Pragma: https://emotion.sh/docs/css-prop#jsx-pragma\n\nexport default ({ tooltipStyle }: { tooltipStyle?: React.CSSProperties }) => <Global styles={css`\n.tippy-box[data-animation=\"fade\"][data-state=\"hidden\"] {\n    opacity: 0;\n}\n[data-tippy-root] {\n    max-width: calc(100vw - 10px);\n}\n.tippy-box {\n    position: relative;\n    background-color: rgba(97, 97, 97, 0.92);\n    color: #fff;\n    border-radius: 4px;\n    font-size: 0.6875rem;\n    max-width: 300px;\n    margin: 2px;\n    word-wrap: break-word;\n    font-weight: 500;\n    outline: 0;\n    transition-property: transform, visibility, opacity;\n    ${tooltipStyle && css(tooltipStyle as Record<string, any>)}\n}\n.tippy-box[data-placement^=\"top\"] > .tippy-arrow {\n    bottom: 0;\n}\n.tippy-box[data-placement^=\"top\"] > .tippy-arrow:before {\n    bottom: -7px;\n    left: 0;\n    border-width: 8px 8px 0;\n    border-top-color: initial;\n    transform-origin: center top;\n}\n.tippy-box[data-placement^=\"bottom\"] > .tippy-arrow {\n    top: 0;\n}\n.tippy-box[data-placement^=\"bottom\"] > .tippy-arrow:before {\n    top: -7px;\n    left: 0;\n    border-width: 0 8px 8px;\n    border-bottom-color: initial;\n    transform-origin: center bottom;\n}\n.tippy-box[data-placement^=\"left\"] > .tippy-arrow {\n    right: 0;\n}\n.tippy-box[data-placement^=\"left\"] > .tippy-arrow:before {\n    border-width: 8px 0 8px 8px;\n    border-left-color: initial;\n    right: -7px;\n    transform-origin: center left;\n}\n.tippy-box[data-placement^=\"right\"] > .tippy-arrow {\n    left: 0;\n}\n.tippy-box[data-placement^=\"right\"] > .tippy-arrow:before {\n    left: -7px;\n    border-width: 8px 8px 8px 0;\n    border-right-color: initial;\n    transform-origin: center right;\n}\n.tippy-box[data-inertia][data-state=\"visible\"] {\n    transition-timing-function: cubic-bezier(0.54, 1.5, 0.38, 1.11);\n}\n.tippy-arrow {\n    width: 16px;\n    height: 16px;\n    color: ${(tooltipStyle && tooltipStyle.backgroundColor) ? tooltipStyle.backgroundColor : \"rgba(97, 97, 97, 0.92)\" };\n}\n.tippy-arrow:before {\n    content: \"\";\n    position: absolute;\n    border-color: transparent;\n    border-style: solid;\n}\n.tippy-content {\n    position: relative;\n    padding: 4px 8px;\n    z-index: 1;\n}\n`} />\n","import React, { useState } from 'react';\nimport styled from '@emotion/styled';\nimport SingleAvatar from './SingleAvatar';\nimport OverflowAvatar from './OverflowAvatar';\nimport { AvatarGroupOptions, IAvatar } from './types';\nimport TooltipStyles from './TooltipStyles';\n\nconst GroupDiv = styled.div`\n    display: flex;\n    flex-wrap: wrap;\n    align-items: center;\n    & img:first-of-type {\n        margin-left: 3px;\n    }\n    &:hover img:nth-of-type(n+2) {\n        margin-left: 3px;\n    }\n    &:hover .overflow-hidden {\n        opacity: 0;\n    }\n    &:not(:hover) .hidden {\n        opacity: 0;\n        width: 0;\n        margin-left: 0;\n    }\n`\n\ninterface IAvatarGroup extends AvatarGroupOptions {\n    // Array of strings with avatar names or Avatar object for more control\n    avatars: (string | IAvatar)[];\n}\n\nexport default function AvatarGroup(props: IAvatarGroup) {\n    const [overrideMax, setOverrideMax] = useState<boolean>(false);\n\n    if (props.avatars.length === 0) {\n        return <></>;\n    } else {\n        if (props.max && props.avatars.length > props.max) {\n            if (props.displayAllOnHover) {\n                return (\n                    <GroupDiv style={props.style} onMouseEnter={_ => setOverrideMax(true)} onMouseLeave={_ => setOverrideMax(false)}>\n                        {props.avatars.map((ele, i) =>\n                            <SingleAvatar\n                                avatar={ele}\n                                options={props}\n                                hidden={i >= (props.max as number)}\n                                key={\"avatar-max-\" + i}\n                            />)\n                        }\n                        <OverflowAvatar avatar={`+${props.avatars.length - props.max}`} options={props} key=\"avatar-overflow\" hidden={overrideMax} />\n                        {!props.hideTooltip && <TooltipStyles tooltipStyle={props.tooltipStyle} />}\n                    </GroupDiv>\n                );\n            } else {\n                return (\n                    <GroupDiv style={props.style}>\n                        {props.avatars.slice(0, props.max).map((ele, i) =>\n                            <SingleAvatar\n                                avatar={ele}\n                                options={props}\n                                key={\"avatar-max-\" + i}\n                            />)\n                        }\n                        <OverflowAvatar avatar={`+${props.avatars.length - props.max}`} options={props} key=\"avatar-overflow\" />\n                        {!props.hideTooltip && <TooltipStyles tooltipStyle={props.tooltipStyle} />}\n                    </GroupDiv>\n                );\n            }\n        } else {\n            return (\n                <GroupDiv style={props.style}>\n                    {props.avatars.map((ele, i) =>\n                        <SingleAvatar\n                            avatar={ele}\n                            options={props}\n                            key={\"avatar-nomax-\" + i}\n                        />)\n                    }\n                    {!props.hideTooltip && <TooltipStyles tooltipStyle={props.tooltipStyle} />}\n                </GroupDiv>\n            );\n        }\n    }\n}\n","export const names = [\n    \"Brietta\",\n    \"Pollyanna\",\n    \"Derron\",\n    \"Lucio\",\n    \"Clair\",\n    \"Englebert\",\n    \"Blisse\",\n    \"Earle\",\n    \"Nicole\",\n    \"Cariotta\",\n    \"Lauraine\",\n    \"Sandye\",\n    \"Gordie\",\n    \"Abeu\",\n    \"Carmelina\",\n    \"Garner\",\n    \"Manon\",\n    \"Quentin\",\n    \"Devon\",\n    \"Lezlie\",\n    \"Gwenette\",\n    \"Zaria\",\n    \"Rafaela\",\n    \"Guglielma\",\n    \"Elisha\",\n    \"Rosabelle\",\n    \"Horatius\",\n    \"Hugibert\",\n    \"Thaxter\",\n    \"Alida\",\n    \"Brittne\",\n    \"Emilie\",\n    \"Noelyn\",\n    \"Hercules\",\n    \"Debra\",\n    \"Irwinn\",\n    \"Kristofer\",\n    \"Verla\",\n    \"Antonetta\",\n    \"Sheff\",\n    \"Ethe\",\n    \"Maurizio\",\n    \"Rozina\",\n    \"Stanislaw\",\n    \"Mickie\",\n    \"Harcourt\",\n    \"Boniface\",\n    \"Ives\",\n    \"Jasun\",\n    \"Marget\",\n    \"Berget\",\n    \"Conroy\",\n    \"Mabel\",\n    \"Andonis\",\n    \"Mellicent\",\n    \"Ezri\",\n    \"Geordie\",\n    \"Michale\",\n    \"Derron\",\n    \"Lucio\",\n    \"Clair\",\n    \"Englebert\",\n    \"Blisse\",\n    \"Earle\",\n    \"Nicole\",\n    \"Cariotta\",\n    \"Lauraine\",\n    \"Sandye\",\n    \"Gordie\",\n    \"Abeu\",\n    \"Carmelina\",\n    \"Garner\",\n    \"Manon\",\n    \"Quentin\",\n    \"Devon\",\n    \"Lezlie\",\n    \"Gwenette\",\n    \"Zaria\",\n    \"Rafaela\",\n    \"Guglielma\",\n    \"Elisha\",\n    \"Rosabelle\",\n    \"Horatius\",\n    \"Hugibert\",\n    \"Thaxter\",\n    \"Alida\",\n    \"Brittne\",\n    \"Emilie\",\n    \"Noelyn\",\n    \"Hercules\",\n    \"Debra\",\n    \"Irwinn\",\n    \"Kristofer\",\n    \"Verla\",\n    \"Antonetta\",\n    \"Sheff\",\n    \"Ethe\",\n    \"Maurizio\",\n    \"Rozina\",\n    \"Stanislaw\",\n    \"Mickie\",\n    \"Harcourt\",\n    \"Boniface\",\n    \"Ives\",\n    \"Jasun\",\n    \"Marget\",\n    \"Berget\",\n    \"Conroy\",\n    \"Mabel\",\n    \"Andonis\",\n    \"Mellicent\",\n    \"Ezri\",\n    \"Geordie\",\n    \"Michale\",\n    \"Hamil\",\n    \"Barbara\",\n    \"Krishnah\",\n    \"Marcelle\",\n    \"Normy\",\n    \"Roddy\",\n    \"Vin\",\n    \"Hart\",\n    \"Ileana\",\n    \"Gleda\",\n    \"Peadar\",\n    \"Den\",\n    \"Frank\",\n    \"Valry\",\n    \"Bastian\",\n    \"Mordy\",\n    \"Holly\",\n    \"Estele\",\n    \"Westley\",\n    \"Darleen\",\n    \"Claus\",\n    \"Lowrance\",\n    \"Rosetta\",\n    \"Sarita\",\n    \"Mord\",\n    \"Base\",\n    \"Amii\",\n    \"Antonietta\",\n    \"Wye\",\n    \"Horten\",\n    \"Portie\",\n    \"Owen\",\n    \"Leoine\",\n    \"Harlie\",\n    \"Alic\",\n    \"Camella\",\n    \"Timi\",\n    \"Leanora\",\n    \"Brandy\",\n    \"Del\",\n    \"Hamil\",\n    \"Barbara\",\n    \"Krishnah\",\n    \"Marcelle\",\n    \"Normy\",\n    \"Roddy\",\n    \"Vin\",\n    \"Hart\",\n    \"Ileana\",\n    \"Gleda\",\n    \"Peadar\",\n    \"Den\",\n    \"Frank\",\n    \"Valry\",\n    \"Bastian\",\n    \"Mordy\",\n    \"Holly\",\n    \"Estele\",\n    \"Westley\",\n    \"Darleen\",\n    \"Claus\",\n    \"Lowrance\",\n    \"Rosetta\",\n    \"Sarita\",\n    \"Mord\",\n    \"Base\",\n    \"Amii\",\n    \"Antonietta\",\n    \"Wye\",\n    \"Horten\",\n    \"Portie\",\n    \"Owen\",\n    \"Leoine\",\n    \"Harlie\",\n    \"Alic\",\n    \"Camella\",\n    \"Timi\",\n    \"Leanora\",\n    \"Brandy\",\n    \"Del\",\n    \"Ervin\"\n]\n\nexport const extraColorArray = ['FF6633', 'FFB399', 'FF33FF', 'FFFF99', '00B3E6',\n    'E6B333', '3366E6', '999966', '99FF99', 'B34D4D',\n    '80B300', '809900', 'E6B3B3', '6680B3', '66991A',\n    'FF99E6', 'CCFF1A', 'FF1A66', 'E6331A', '33FFCC',\n    '66994D', 'B366CC', '4D8000', 'B33300', 'CC80CC',\n    '66664D', '991AFF', 'E666FF', '4DB3FF', '1AB399',\n    'E666B3', '33991A', 'CC9999', 'B3B31A', '00E680',\n    '4D8066', '809980', 'E6FF80', '1AFF33', '999933',\n    'FF3380', 'CCCC00', '66E64D', '4D80CC', '9900B3',\n    'E64D66', '4DB380', 'FF4D4D', '99E6E6', '6666FF'];","import AvatarGroup from 'react-avatar-group';\nimport { names, extraColorArray } from './utils';\nimport './App.css'\n\nfunction ExampleGroup({ name, ...props }) {\n  return (\n    <div>\n      <h4>{name}</h4>\n      <AvatarGroup {...props} />\n    </div>\n  )\n}\n\nfunction App() {\n  return (\n    <div style={{ marginLeft: 15, display: \"flex\", flexDirection: \"column\", justifyContent: \"space-around\", height: \"100vh\" }}>\n      <ExampleGroup \n        name=\"Single Avatar\"\n        avatars={names.slice(0, 1)}\n      />\n      <ExampleGroup\n        name=\"1 Character, uppercase, mixing string and object square avatars\"\n        avatars={[...names.slice(0, 4), { avatar: \"Dilan\", backgroundColor: \"CCCCCC\", fontColor: \"000000\", tooltip: \"This is a custom tooltip. This is a custom tooltip. This is a custom tooltip. This is a custom tooltip. This is a custom tooltip. This is a custom tooltip. This is a custom tooltip. This is a custom tooltip. This is a custom tooltip. This is a custom tooltip. This is a custom tooltip. This is a custom tooltip. \" }]}\n        initialCharacters={1}\n        uppercase\n        size={40}\n        square\n      />\n      <ExampleGroup \n        name=\"Maximum avatars, display all on hover\"\n        avatars={names.slice(0, 10)}\n        max={2}\n        uppercase\n        size={60}\n        shadow={2}\n        fontColor=\"00FF00\"\n        displayAllOnHover\n      />\n      <ExampleGroup\n        name=\"Stress test max, display all on hover\"\n        avatars={names.slice(0, 100)}\n        max={2}\n        uppercase\n        size={60}\n        shadow={2}\n        displayAllOnHover\n      />\n      <ExampleGroup\n        name=\"Stress test max, don't display all on hover, custom random background colors array\"\n        avatars={names.slice(0, 1200)}\n        max={25}\n        uppercase\n        size={60}\n        randomBackgroundColors={extraColorArray}\n        shadow={2}\n      />\n      <ExampleGroup\n        name=\"1 character, tooltip with arrow\"\n        avatars={names.slice(0, 100)}\n        initialCharacters={1}\n        max={2}\n        size={60}\n        square\n        tooltipArrow\n      />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}